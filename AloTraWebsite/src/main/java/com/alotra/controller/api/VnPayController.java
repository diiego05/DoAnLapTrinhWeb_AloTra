package com.alotra.controller.api;

import com.alotra.entity.Order;
import com.alotra.enums.PaymentStatus;
import com.alotra.service.OrderService;
import com.alotra.service.PaymentService;
import com.alotra.service.VnPayService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/payment/vnpay")
@RequiredArgsConstructor
public class VnPayController {

    private final VnPayService vnPayService;
    private final OrderService orderService;
    private final PaymentService paymentService;

    /**
     * üßæ 1Ô∏è‚É£ T·∫°o link thanh to√°n VNPay cho ƒë∆°n h√†ng
     */
    @PostMapping("/create")
    public ResponseEntity<String> createPayment(@RequestParam Long orderId, HttpServletRequest request) {
        Order order = orderService.findOrderById(orderId);
        if (order == null) {
            return ResponseEntity.badRequest().body("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i");
        }

        // üí∞ T·∫°o b·∫£n ghi thanh to√°n tr∆∞·ªõc khi redirect sang VNPay
        var payment = paymentService.createPayment(
                order.getId(),
                "VNPAY",
                order.getTotal(),
                order.getPaymentMethod()
        );

        // üîó Sinh URL thanh to√°n t·ª´ VNPay
        String paymentUrl = vnPayService.createPaymentUrl(
                request,
                order.getTotal().longValue(),
                order.getCode()
        );

        // üè∑Ô∏è G·∫Øn transactionCode v√†o payment (·ªü ƒë√¢y ch√≠nh l√† orderCode ho·∫∑c response t·ª´ VNPay callback)
        paymentService.updateTransactionCode(payment.getId(), order.getCode());

        return ResponseEntity.ok(paymentUrl);
    }

    /**
     * ü™ô 2Ô∏è‚É£ X·ª≠ l√Ω callback t·ª´ VNPay
     * (Sau khi ng∆∞·ªùi d√πng thanh to√°n xong)
     */
    @GetMapping("/return")
    public String handleReturn(@RequestParam Map<String, String> params) {
        boolean valid = vnPayService.validateSignature(params);
        String orderCode = params.get("vnp_TxnRef");
        String transactionStatus = params.get("vnp_TransactionStatus");

        if (valid && "00".equals(transactionStatus)) {
            // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            paymentService.markSuccess(orderCode);
            return "Thanh to√°n th√†nh c√¥ng ƒë∆°n h√†ng #" + orderCode;
        } else {
            paymentService.markFailed(orderCode, params.toString());
            return "Thanh to√°n th·∫•t b·∫°i!";
        }
    }
}
